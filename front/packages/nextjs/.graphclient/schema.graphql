schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type DisasterRegistered {
  id: Bytes!
  disasterId: String!
  status: Boolean!
  disaster_category: String!
  disaster_location: String!
  disaster_evidence: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input DisasterRegistered_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  disasterId: String
  disasterId_not: String
  disasterId_gt: String
  disasterId_lt: String
  disasterId_gte: String
  disasterId_lte: String
  disasterId_in: [String!]
  disasterId_not_in: [String!]
  disasterId_contains: String
  disasterId_contains_nocase: String
  disasterId_not_contains: String
  disasterId_not_contains_nocase: String
  disasterId_starts_with: String
  disasterId_starts_with_nocase: String
  disasterId_not_starts_with: String
  disasterId_not_starts_with_nocase: String
  disasterId_ends_with: String
  disasterId_ends_with_nocase: String
  disasterId_not_ends_with: String
  disasterId_not_ends_with_nocase: String
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  disaster_category: String
  disaster_category_not: String
  disaster_category_gt: String
  disaster_category_lt: String
  disaster_category_gte: String
  disaster_category_lte: String
  disaster_category_in: [String!]
  disaster_category_not_in: [String!]
  disaster_category_contains: String
  disaster_category_contains_nocase: String
  disaster_category_not_contains: String
  disaster_category_not_contains_nocase: String
  disaster_category_starts_with: String
  disaster_category_starts_with_nocase: String
  disaster_category_not_starts_with: String
  disaster_category_not_starts_with_nocase: String
  disaster_category_ends_with: String
  disaster_category_ends_with_nocase: String
  disaster_category_not_ends_with: String
  disaster_category_not_ends_with_nocase: String
  disaster_location: String
  disaster_location_not: String
  disaster_location_gt: String
  disaster_location_lt: String
  disaster_location_gte: String
  disaster_location_lte: String
  disaster_location_in: [String!]
  disaster_location_not_in: [String!]
  disaster_location_contains: String
  disaster_location_contains_nocase: String
  disaster_location_not_contains: String
  disaster_location_not_contains_nocase: String
  disaster_location_starts_with: String
  disaster_location_starts_with_nocase: String
  disaster_location_not_starts_with: String
  disaster_location_not_starts_with_nocase: String
  disaster_location_ends_with: String
  disaster_location_ends_with_nocase: String
  disaster_location_not_ends_with: String
  disaster_location_not_ends_with_nocase: String
  disaster_evidence: String
  disaster_evidence_not: String
  disaster_evidence_gt: String
  disaster_evidence_lt: String
  disaster_evidence_gte: String
  disaster_evidence_lte: String
  disaster_evidence_in: [String!]
  disaster_evidence_not_in: [String!]
  disaster_evidence_contains: String
  disaster_evidence_contains_nocase: String
  disaster_evidence_not_contains: String
  disaster_evidence_not_contains_nocase: String
  disaster_evidence_starts_with: String
  disaster_evidence_starts_with_nocase: String
  disaster_evidence_not_starts_with: String
  disaster_evidence_not_starts_with_nocase: String
  disaster_evidence_ends_with: String
  disaster_evidence_ends_with_nocase: String
  disaster_evidence_not_ends_with: String
  disaster_evidence_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DisasterRegistered_filter]
  or: [DisasterRegistered_filter]
}

enum DisasterRegistered_orderBy {
  id
  disasterId
  status
  disaster_category
  disaster_location
  disaster_evidence
  blockNumber
  blockTimestamp
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  disasterRegistered(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DisasterRegistered
  disasterRegistereds(
    skip: Int = 0
    first: Int = 100
    orderBy: DisasterRegistered_orderBy
    orderDirection: OrderDirection
    where: DisasterRegistered_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DisasterRegistered!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  disasterRegistered(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DisasterRegistered
  disasterRegistereds(
    skip: Int = 0
    first: Int = 100
    orderBy: DisasterRegistered_orderBy
    orderDirection: OrderDirection
    where: DisasterRegistered_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DisasterRegistered!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}